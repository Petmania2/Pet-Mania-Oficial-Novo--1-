<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Pet Mania - Meu Perfil</title>
    <link rel="stylesheet" href="/css/style-cliente.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        .painel-container {
            padding: 120px 0 80px;
            background-color: #f5f7fa;
        }
        
        .painel-content {
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            padding: 30px;
            max-width: 1000px;
            margin: 0 auto;
        }
        
        .perfil-header {
            text-align: center;
            margin-bottom: 3rem;
            padding-bottom: 2rem;
            border-bottom: 2px solid #f0f0f0;
        }
        
        .perfil-info {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 2rem;
            margin-bottom: 2rem;
        }
        
        .info-card {
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            padding: 1.5rem;
            border-radius: 10px;
            border-left: 4px solid #FFA500;
        }
        
        .info-card h3 {
            color: #FFA500;
            margin-bottom: 1rem;
            font-size: 1.2rem;
        }
        
        .info-item {
            margin-bottom: 0.8rem;
            display: flex;
            align-items: center;
        }
        
        .info-item i {
            color: #FFA500;
            margin-right: 10px;
            width: 20px;
        }
        
        .info-item strong {
            color: #333;
            margin-right: 8px;
        }
        
        .pet-card {
            grid-column: 1 / -1;
            background: linear-gradient(135deg, #fff5e6 0%, #ffe0b3 100%);
            padding: 2rem;
            border-radius: 15px;
            text-align: center;
            border: 2px solid #FFA500;
        }
        
        .pet-avatar {
            width: 100px;
            height: 100px;
            background: #FFA500;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 1rem;
            font-size: 3rem;
            color: white;
        }
        
        .actions-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1.5rem;
            margin-top: 2rem;
        }
        
        .action-card {
            background: white;
            border: 2px solid #f0f0f0;
            border-radius: 10px;
            padding: 1.5rem;
            text-align: center;
            transition: all 0.3s ease;
            cursor: pointer;
        }
        
        .action-card:hover {
            border-color: #FFA500;
            transform: translateY(-5px);
            box-shadow: 0 8px 25px rgba(255, 165, 0, 0.15);
        }
        
        .action-card i {
            font-size: 2.5rem;
            color: #FFA500;
            margin-bottom: 1rem;
        }
        
        .logout-btn {
            position: fixed;
            top: 100px;
            right: 20px;
            background: #dc3545;
            color: white;
            border: none;
            padding: 10px 15px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 0.9rem;
            transition: all 0.3s ease;
        }
        
        .logout-btn:hover {
            background: #c82333;
            transform: translateY(-2px);
        }
        
        @media (max-width: 768px) {
            .perfil-info {
                grid-template-columns: 1fr;
            }
            
            .logout-btn {
                position: relative;
                top: auto;
                right: auto;
                margin: 1rem auto;
                display: block;
            }
        }
    </style>
</head>
<body>
    <!-- Navbar -->
    <nav class="navbar" id="navbar">
        <section class="container navbar-container">
            <a href="/" class="logo-subtle">
                <img src="/imagens/petlogo.png" alt="Pet Mania" class="logo-img-subtle">
            </a>
            <button class="mobile-menu-btn" id="menuBtn">‚ò∞</button>
            <ul class="nav-links" id="navLinks">
                <li><a href="/" class="nav-item">Home</a></li>
                <li><a href="/#find-trainer" class="nav-item">Encontrar</a></li>
                <li><a href="/#trainers" class="nav-item">Adestradores</a></li>
                <li><span class="nav-item" style="color: #FFA500; font-weight: 600;">Ol√°, <%= cliente.nome.split(' ')[0] %>!</span></li>
            </ul>
        </section>
    </nav>

    <!-- Bot√£o de Logout -->
    <button class="logout-btn" onclick="logout()">
        <i class="fas fa-sign-out-alt"></i> Sair
    </button>

    <!-- Painel Section -->
    <section class="painel-container">
        <section class="container">
            <section class="painel-content">
                <section class="perfil-header">
                    <h1>üêæ Meu Perfil</h1>
                    <p>Bem-vindo(a) de volta, <%= cliente.nome %>!</p>
                </section>
                
                <section class="perfil-info">
                    <!-- Informa√ß√µes Pessoais -->
                    <section class="info-card">
                        <h3><i class="fas fa-user"></i> Informa√ß√µes Pessoais</h3>
                        <div class="info-item">
                            <i class="fas fa-user-circle"></i>
                            <strong>Nome:</strong> <%= cliente.nome %>
                        </div>
                        <div class="info-item">
                            <i class="fas fa-envelope"></i>
                            <strong>Email:</strong> <%= cliente.email %>
                        </div>
                        <div class="info-item">
                            <i class="fas fa-phone"></i>
                            <strong>Telefone:</strong> <%= cliente.telefone %>
                        </div>
                        <div class="info-item">
                            <i class="fas fa-map-marker-alt"></i>
                            <strong>Cidade:</strong> <%= cliente.cidade %>
                        </div>
                        <div class="info-item">
                            <i class="fas fa-home"></i>
                            <strong>Endere√ßo:</strong> <%= cliente.endereco %>
                        </div>
                    </section>
                    
                    <!-- Informa√ß√µes de Adestramento -->
                    <section class="info-card">
                        <h3><i class="fas fa-graduation-cap"></i> Adestramento</h3>
                        <div class="info-item">
                            <i class="fas fa-bullhorn"></i>
                            <strong>Tipo:</strong> 
                            <% 
                            const tiposAdestramento = {
                                'obediencia-basica': 'Obedi√™ncia B√°sica',
                                'comportamento': 'Problemas de Comportamento',
                                'truques': 'Truques e Comandos',
                                'agressividade': 'Controle de Agressividade'
                            };
                            %>
                            <%= tiposAdestramento[cliente.tipo_adestramento] || cliente.tipo_adestramento %>
                        </div>
                        <% if (cliente.descricao) { %>
                        <div class="info-item" style="flex-direction: column; align-items: flex-start;">
                            <div style="display: flex; align-items: center; margin-bottom: 0.5rem;">
                                <i class="fas fa-comment"></i>
                                <strong>Observa√ß√µes:</strong>
                            </div>
                            <p style="margin-left: 30px; color: #666; line-height: 1.4;">
                                <%= cliente.descricao %>
                            </p>
                        </div>
                        <% } %>
                    </section>
                </section>
                
                <!-- Mapa de Adestradores -->
                <section class="info-card" style="grid-column: 1 / -1; margin-top: 2rem;">
                    <h3><i class="fas fa-map-marker-alt"></i> Encontrar Adestradores Pr√≥ximos</h3>
                    
                    <div style="margin: 8px 0; display:flex; gap:8px; flex-wrap:wrap;">
                        <button id="btn-locate">Encontrar meu local</button>
                        <input id="address" type="text" placeholder="Digite um endere√ßo" style="min-width:200px; padding:6px;" />
                        <button id="btn-geocode">Buscar</button>
                        <label>Raio (km):
                            <input id="radius" type="number" value="5" min="0.1" step="0.1" style="width:60px; padding:4px;" />
                        </label>
                        <button id="btn-filter">Aplicar</button>
                    </div>

                    <div id="map" style="height: 400px; border: 1px solid #ccc; margin: 10px 0;"></div>
                    <div id="nearest"></div>
                </section>
            </section>
        </section>
    </section>

    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <script>
        let trainers = [
            { "id": 1, "name": "Jo√£o Silva", "lat": -23.55052, "lng": -46.633308, "info": "Especialista em obedi√™ncia b√°sica" },
            { "id": 2, "name": "Maria Santos", "lat": -23.5587, "lng": -46.6250, "info": "Comportamento agressivo" },
            { "id": 3, "name": "Carlos Oliveira", "lat": -23.5450, "lng": -46.6400, "info": "Adestramento domiciliar" }
        ];

        const map = L.map('map').setView([-23.55, -46.63], 13);
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; OpenStreetMap contributors'
        }).addTo(map);

        let trainerMarkers = L.layerGroup().addTo(map);
        let userMarker = null;
        let currentUserLocation = null;

        function renderMarkers() {
            trainerMarkers.clearLayers();
            trainers.forEach(t => {
                L.marker([t.lat, t.lng]).addTo(trainerMarkers)
                    .bindPopup(`<strong>${t.name}</strong><br>${t.info}`);
            });
        }

        function haversine(lat1, lon1, lat2, lon2) {
            const R = 6371;
            const dLat = (lat2 - lat1) * Math.PI / 180;
            const dLon = (lon2 - lon1) * Math.PI / 180;
            const a = Math.sin(dLat/2) * Math.sin(dLat/2) +
                      Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
                      Math.sin(dLon/2) * Math.sin(dLon/2);
            return R * 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
        }

        function showNearest(userLat, userLng, radiusKm = null) {
            const distances = trainers.map(t => ({
                ...t,
                distance: haversine(userLat, userLng, t.lat, t.lng)
            })).sort((a,b) => a.distance - b.distance);
            
            let filtered = distances;
            if (radiusKm) {
                filtered = distances.filter(t => t.distance <= radiusKm);
            }
            
            const container = document.getElementById('nearest');
            if (!filtered.length) {
                container.innerHTML = '<p>Nenhum adestrador encontrado no raio selecionado.</p>';
                return;
            }
            
            container.innerHTML = '<h4>Adestradores pr√≥ximos:</h4>' +
                filtered.slice(0, 5).map(t => 
                    `<div style="padding:8px; border-bottom:1px solid #eee;">
                        <strong>${t.name}</strong> - ${t.distance.toFixed(2)} km<br>
                        <small>${t.info}</small>
                    </div>`
                ).join('');
        }

        document.getElementById('btn-locate').addEventListener('click', () => {
            if (!navigator.geolocation) return alert('Geolocaliza√ß√£o n√£o suportada.');
            navigator.geolocation.getCurrentPosition(pos => {
                const lat = pos.coords.latitude;
                const lng = pos.coords.longitude;
                if (userMarker) map.removeLayer(userMarker);
                userMarker = L.marker([lat, lng]).addTo(map).bindPopup('Voc√™ est√° aqui');
                map.setView([lat, lng], 13);
                currentUserLocation = { lat, lng };
                const radius = parseFloat(document.getElementById('radius').value);
                showNearest(lat, lng, radius);
            }, () => alert('Erro ao obter localiza√ß√£o'));
        });

        document.getElementById('btn-geocode').addEventListener('click', async () => {
            const address = document.getElementById('address').value.trim();
            if (!address) return alert('Digite um endere√ßo.');
            try {
                const url = `https://photon.komoot.io/api/?q=${encodeURIComponent(address)}&limit=1`;
                const res = await fetch(url);
                const data = await res.json();
                if (data.features?.length) {
                    const [lng, lat] = data.features[0].geometry.coordinates;
                    if (userMarker) map.removeLayer(userMarker);
                    userMarker = L.marker([lat, lng]).addTo(map).bindPopup('Localiza√ß√£o buscada');
                    map.setView([lat, lng], 13);
                    currentUserLocation = { lat, lng };
                    const radius = parseFloat(document.getElementById('radius').value);
                    showNearest(lat, lng, radius);
                } else {
                    alert('Endere√ßo n√£o encontrado.');
                }
            } catch (err) {
                alert('Erro na busca.');
            }
        });

        document.getElementById('btn-filter').addEventListener('click', () => {
            if (!currentUserLocation) return alert('Defina sua localiza√ß√£o primeiro.');
            const radius = parseFloat(document.getElementById('radius').value);
            showNearest(currentUserLocation.lat, currentUserLocation.lng, radius);
        });

        renderMarkers();
    </script>

    <script src="/js/ai-chat.js"></script>
    <link rel="stylesheet" href="/css/ai-chat.css">