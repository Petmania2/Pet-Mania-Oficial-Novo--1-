const mysql = require('mysql2/promise');
require('dotenv').config();

// Configura√ß√£o do pool MUITO mais conservadora para Clever Cloud
const pool = mysql.createPool({
    host: process.env.DB_HOST,
    user: process.env.DB_USER,
    password: process.env.DB_PASSWORD,
    database: process.env.DB_NAME,
    port: process.env.DB_PORT,
    waitForConnections: true,
    connectionLimit: 4, // REDUZIDO para apenas 2 conex√µes
    queueLimit: 10, // Fila limitada
    acquireTimeout: 10000, // Timeout menor
    timeout: 15000, // Timeout de query menor
    idleTimeout: 10000, // Fechar conex√µes inativas rapidamente
    maxIdle: 0, // N√ÉO manter conex√µes idle
    enableKeepAlive: false, // Desabilitar keep-alive
    reconnect: true,
    ssl: {
        rejectUnauthorized: false
    }
});

// Singleton para controlar uma √∫nica conex√£o ativa
class DatabaseConnection {
    constructor() {
        this.activeConnection = null;
        this.connectionInUse = false;
    }

    async getConnection() {
        // Se j√° tem uma conex√£o ativa e n√£o est√° em uso, reutilizar
        if (this.activeConnection && !this.connectionInUse) {
            try {
                // Testar se a conex√£o ainda est√° v√°lida
                await this.activeConnection.ping();
                this.connectionInUse = true;
                return this.activeConnection;
            } catch (error) {
                // Conex√£o morreu, limpar
                this.activeConnection = null;
                this.connectionInUse = false;
            }
        }

        // Criar nova conex√£o se necess√°rio
        if (!this.activeConnection) {
            this.activeConnection = await pool.getConnection();
            this.connectionInUse = true;
        }

        return this.activeConnection;
    }

    releaseConnection() {
        this.connectionInUse = false;
        // N√ÉO liberar a conex√£o imediatamente, reutilizar
    }

    async closeConnection() {
        if (this.activeConnection) {
            try {
                this.activeConnection.release();
                this.activeConnection = null;
                this.connectionInUse = false;
            } catch (error) {
                console.error('Erro ao fechar conex√£o:', error.message);
            }
        }
    }
}

// Inst√¢ncia singleton
const dbConnection = new DatabaseConnection();

// Fun√ß√£o otimizada para executar queries
async function executeQuery(query, params = []) {
    const maxRetries = 3; // Reduzido para 3 tentativas
    let lastError;
    
    for (let attempt = 1; attempt <= maxRetries; attempt++) {
        try {
            console.log(`üîç Executando query (tentativa ${attempt})`);
            
            const connection = await dbConnection.getConnection();
            const [rows] = await connection.execute(query, params);
            
            console.log(`‚úÖ Query executada com sucesso!`);
            dbConnection.releaseConnection();
            return rows;
            
        } catch (error) {
            lastError = error;
            console.error(`‚ùå Erro na tentativa ${attempt}:`, {
                message: error.message,
                code: error.code
            });
            
            dbConnection.releaseConnection();
            
            // Se for erro de limite de conex√µes
            if (error.code === 'ER_USER_LIMIT_REACHED' || 
                error.code === 'ER_TOO_MANY_USER_CONNECTIONS' || 
                error.errno === 1226) {
                
                console.log('üö´ Limite de conex√µes atingido. Fechando todas as conex√µes...');
                
                // Fechar conex√£o singleton
                await dbConnection.closeConnection();
                
                // Fechar todas as conex√µes do pool
                try {
                    await pool.end();
                    console.log('üîí Pool fechado devido ao limite');
                } catch (e) {
                    console.error('Erro ao fechar pool:', e.message);
                }
                
                // Recriar pool se n√£o for a √∫ltima tentativa
                if (attempt < maxRetries) {
                    const waitTime = attempt * 3000;
                    console.log(`‚è≥ Aguardando ${waitTime}ms antes de tentar novamente...`);
                    await new Promise(resolve => setTimeout(resolve, waitTime));
                    continue;
                }
            }
            
            // Para erros de conex√£o, fechar e tentar novamente
            if (error.code === 'ECONNRESET' || 
                error.code === 'PROTOCOL_CONNECTION_LOST') {
                
                await dbConnection.closeConnection();
                
                if (attempt < maxRetries) {
                    await new Promise(resolve => setTimeout(resolve, 2000));
                    continue;
                }
            }
            
            // Para outros erros, parar
            break;
        }
    }
    
    console.error('‚ùå Todas as tentativas falharam:', lastError.message);
    throw lastError;
}

// Fun√ß√£o para testar conex√£o de forma mais leve
async function testConnection() {
    try {
        console.log('üîç Testando conex√£o...');
        await executeQuery('SELECT 1 as test');
        console.log('‚úÖ Conex√£o OK!');
        return true;
    } catch (error) {
        console.error('‚ùå Erro na conex√£o:', error.message);
        return false;
    }
}

// Limpeza agressiva de conex√µes a cada 2 minutos
function setupConnectionCleaner() {
    setInterval(async () => {
        try {
            console.log('üßπ Limpando conex√µes...');
            await dbConnection.closeConnection();
            
            // For√ßar limpeza do pool
            const poolConnections = pool._allConnections;
            if (poolConnections && poolConnections.length > 0) {
                console.log(`üîÑ Limpando ${poolConnections.length} conex√µes do pool...`);
                for (const conn of poolConnections) {
                    try {
                        if (conn && conn.connection && !conn.connection.destroyed) {
                            conn.connection.destroy();
                        }
                    } catch (e) {
                        // Ignorar erros de limpeza
                    }
                }
            }
        } catch (error) {
            console.log('Erro na limpeza:', error.message);
        }
    }, 2 * 60 * 1000); // A cada 2 minutos
}

// Fun√ß√£o para fechar tudo
async function closePool() {
    try {
        await dbConnection.closeConnection();
        await pool.end();
        console.log('üîí Todas as conex√µes fechadas');
    } catch (error) {
        console.error('Erro ao fechar:', error.message);
    }
}

// Configurar limpeza
setupConnectionCleaner();

module.exports = {
    pool,
    executeQuery,
    testConnection,
    closePool
};